/**
Given two arrays, write a function to compute their intersection.

Example:
Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].

Note:
Each element in the result should appear as many times as it shows in both arrays.
The result can be in any order.

*/


class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
         // 对数组1进行排序
    sort(nums1.begin(), nums1.end());
    // 对数组2进行排序
    sort(nums2.begin(), nums2.end());
    vector<int> result;
    for (int i = 0, j = 0; i < nums1.size() && j < nums2.size(); ) 
    {
        if (nums1[i] == nums2[j])
        {
            result.push_back(nums1[i]);
            i++;
            j++;
        }
        else if (nums1[i] < nums2[j])
            i++;
        else if (nums1[i] > nums2[j])
            j++;
    }
    return result;
    }
};


public class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        ArrayList list = new ArrayList();
        int m = nums1.length;
        int n = nums2.length;

        int k=0;
        
        for (int i = 0, j = 0; i < m && j < n; ) 
        {
            if (nums1[i] == nums2[j])
            {
                list.add(nums1[i]);
                i++;
                j++;
            }
            else if (nums1[i] < nums2[j])
                i++;
            else if (nums1[i] > nums2[j])
                j++;
        }
        int len = list.size();
        int[] result = new int[len];
        for(int i=0; i<len;i++){
            result[i] = (Integer)list.get(i);
        }
        return result;
    }
}
